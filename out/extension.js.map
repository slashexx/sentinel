{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/security.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport { checkForSecurityIssues } from './security';\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('Sentinel is now active!');\n\n    let disposable = vscode.workspace.onDidChangeTextDocument(event => {\n        checkForSecurityIssues(event.document);\n    });\n\n    // Also check when a document is opened\n    vscode.workspace.onDidOpenTextDocument(document => {\n        checkForSecurityIssues(document);\n    });\n\n    const diagnosticCollection = vscode.languages.createDiagnosticCollection(\"sentinel\");\n    context.subscriptions.push(diagnosticCollection);\n\n    context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n", "import * as vscode from 'vscode';\r\n\r\nexport function checkForSecurityIssues(document: vscode.TextDocument) {\r\n    const text = document.getText();\r\n    const diagnostics: vscode.Diagnostic[] = [];\r\n\r\n    // Define some simple security patterns (you can replace this with YARA later)\r\n    const patterns = [\r\n        { regex: /eval\\(/g, message: \"\u26A0\uFE0F Avoid using 'eval()', it's a security risk!\" },\r\n        { regex: /exec\\(/g, message: \"\u26A0\uFE0F Using 'exec()' can lead to command injection!\" },\r\n        { regex: /password\\s*=\\s*['\"].+['\"]/g, message: \"\u26A0\uFE0F Hardcoded passwords detected!\" }\r\n    ];\r\n\r\n    patterns.forEach(pattern => {\r\n        let match;\r\n        while ((match = pattern.regex.exec(text)) !== null) {\r\n            const startPos = document.positionAt(match.index);\r\n            const endPos = document.positionAt(match.index + match[0].length);\r\n            const range = new vscode.Range(startPos, endPos);\r\n\r\n            diagnostics.push(new vscode.Diagnostic(\r\n                range,\r\n                pattern.message,\r\n                vscode.DiagnosticSeverity.Warning\r\n            ));\r\n        }\r\n    });\r\n\r\n    // Add diagnostics (warnings) to the editor\r\n    const diagnosticCollection = vscode.languages.createDiagnosticCollection(\"sentinel\");\r\n    diagnosticCollection.set(document.uri, diagnostics);\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,UAAwB;;;ACAxB,aAAwB;AAEjB,SAAS,uBAAuB,UAA+B;AAClE,QAAM,OAAO,SAAS,QAAQ;AAC9B,QAAM,cAAmC,CAAC;AAG1C,QAAM,WAAW;AAAA,IACb,EAAE,OAAO,WAAW,SAAS,2DAAiD;AAAA,IAC9E,EAAE,OAAO,WAAW,SAAS,6DAAmD;AAAA,IAChF,EAAE,OAAO,8BAA8B,SAAS,6CAAmC;AAAA,EACvF;AAEA,WAAS,QAAQ,aAAW;AACxB,QAAI;AACJ,YAAQ,QAAQ,QAAQ,MAAM,KAAK,IAAI,OAAO,MAAM;AAChD,YAAM,WAAW,SAAS,WAAW,MAAM,KAAK;AAChD,YAAM,SAAS,SAAS,WAAW,MAAM,QAAQ,MAAM,CAAC,EAAE,MAAM;AAChE,YAAM,QAAQ,IAAW,aAAM,UAAU,MAAM;AAE/C,kBAAY,KAAK,IAAW;AAAA,QACxB;AAAA,QACA,QAAQ;AAAA,QACD,0BAAmB;AAAA,MAC9B,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AAGD,QAAM,uBAA8B,iBAAU,2BAA2B,UAAU;AACnF,uBAAqB,IAAI,SAAS,KAAK,WAAW;AACtD;;;AD5BO,SAAS,SAAS,SAAkC;AACvD,UAAQ,IAAI,yBAAyB;AAErC,MAAI,aAAoB,kBAAU,wBAAwB,WAAS;AAC/D,2BAAuB,MAAM,QAAQ;AAAA,EACzC,CAAC;AAGD,EAAO,kBAAU,sBAAsB,cAAY;AAC/C,2BAAuB,QAAQ;AAAA,EACnC,CAAC;AAED,QAAM,uBAA8B,kBAAU,2BAA2B,UAAU;AACnF,UAAQ,cAAc,KAAK,oBAAoB;AAE/C,UAAQ,cAAc,KAAK,UAAU;AACzC;AAEO,SAAS,aAAa;AAAC;",
  "names": ["vscode"]
}
